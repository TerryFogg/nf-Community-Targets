#
# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.
#

 # TODO: Set build type here as buildpresets, inherits in CMakePresets.json does not appear to be working
    set(CMAKE_BUILD_TYPE "Debug")

# This build does not support a nanbooter, code starts in the CLR
    target_compile_definitions(nanoCLR PUBLIC -DTARGET_HAS_NANOBOOTER=FALSE)

# Informational strings
    SET(OEM "nanoCLR running ${TARGET_BOARD}")
    string(REPLACE "." " " BUILD_VERSION_SPACED ${BUILD_VERSION})
    separate_arguments(VERSION_LIST UNIX_COMMAND "${BUILD_VERSION_SPACED}")
    list (GET VERSION_LIST 0 VERSION_MAJOR)
    list (GET VERSION_LIST 1 VERSION_MINOR)
    list (GET VERSION_LIST 2 VERSION_BUILD)
    list (GET VERSION_LIST 3 VERSION_REVISION)

    target_compile_definitions(nanoCLR PUBLIC -DVERSION_MAJOR=${VERSION_MAJOR})
    target_compile_definitions(nanoCLR PUBLIC -DVERSION_MINOR=${VERSION_MINOR})
    target_compile_definitions(nanoCLR PUBLIC -DVERSION_BUILD=${VERSION_BUILD})
    target_compile_definitions(nanoCLR PUBLIC -DVERSION_REVISION=${VERSION_REVISION})
    target_compile_definitions(nanoCLR PUBLIC -DTARGETINFOSTRING=\"${INFOSTRING}\")
    target_compile_definitions(nanoCLR PUBLIC -DTARGETNAMESTRING=\"${TARGET_BOARD}\")
    target_compile_definitions(nanoCLR PUBLIC -DPLATFORMNAMESTRING=\"${TARGET_FAMILY}\")
    target_compile_definitions(nanoCLR PUBLIC -DOEMSYSTEMINFOSTRING=\"${OEM}\")

# Setup the type of build to customise elements of the CLR
    if(CMAKE_BUILD_TYPE STREQUAL "Debug") 
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_ENABLE_SOURCELEVELDEBUGGING)
    endif()
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_definitions(nanoCLR PUBLIC -DBUILD_RTM)
    endif()
    
    target_compile_definitions(nanoCLR PUBLIC -DPLATFORM_NO_CLR_TRACE=1)

    if(NANOCLR_REFLECTION)
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_REFLECTION=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_REFLECTION=0)
    endif()
    if(NANOCLR_SYSTEM_COLLECTIONS)
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_SYSTEM_COLLECTIONS=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_SYSTEM_COLLECTIONS=0)
    endif()
    if(NF_FEATURE_LIGHT_MATH)
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_LIGHT_MATH=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_LIGHT_MATH=0)
    endif()
        if(DP_FLOATINGPOINT)
        target_compile_definitions(nanoCLR PUBLIC -DP_FLOATINGPOINT=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DP_FLOATINGPOINT=0)
    endif()
   if(HAS_CONFIG_BLOCK)
        target_compile_definitions(nanoCLR PUBLIC -DHAS_CONFIG_BLOCK=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DHAS_CONFIG_BLOCK=0)
    endif()
    if(REALTIME_CLOCK)
        target_compile_definitions(nanoCLR PUBLIC -DHAL_USE_RTC=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DHAL_USE_RTC=0)
    endif()
    if(WATCHDOG)
        target_compile_definitions(nanoCLR PUBLIC -DHAL_USE_WDG=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DHAL_USE_WDG=0)
    endif()
    if(RANDOM_NUMBER_GENERATOR)
        target_compile_definitions(nanoCLR PUBLIC -DPLATFORM_HAS_RNG=1)
    else()
        target_compile_definitions(nanoCLR PUBLIC -DPLATFORM_HAS_RNG=0)
    endif()

# Common FileX definitions
    if(FILEX_SYSTEM_SD OR FILEX_SYSTEM_NAND OR FILEX_SYSTEM_NOR OR FILEX_SYSTEM_RAM)
        target_compile_definitions(nanoCLR PUBLIC -DFILEX=TRUE)
        if(FILEX_SYSTEM_SD)
              target_compile_definitions(nanoCLR PUBLIC -DFILEX_SYSTEM_SD=TRUE)
        endif()
        if(FILEX_SYSTEM_NAND)
              target_compile_definitions(nanoCLR PUBLIC -DFILEX_SYSTEM_NAND=TRUE)
        endif()
        if(FILEX_SYSTEM_NOR)
              target_compile_definitions(nanoCLR PUBLIC -DFILEX_SYSTEM_NOR=TRUE)
        endif()
        if(FILEX_SYSTEM_RAM)
              target_compile_definitions(nanoCLR PUBLIC -DFILEX_SYSTEM_RAM=TRUE)
        endif()
    endif()

# Common use button defintion
    if(HAS_A_USER_BUTTON)
          target_compile_definitions(nanoCLR PUBLIC -DUSER_BUTTON=TRUE)
    else()
          target_compile_definitions(nanoCLR PUBLIC -DUSER_BUTTON=FALSE)
    endif()

# Common Graphics definitions
    if(GRAPHICS_SUPPORT)
          target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_GRAPHICS=TRUE)
          target_compile_definitions(nanoCLR PUBLIC -DLCD_WIDTH=${LCD_WIDTH})
          target_compile_definitions(nanoCLR PUBLIC -DLCD_HEIGHT=${LCD_HEIGHT})
          target_compile_definitions(nanoCLR PUBLIC -DLCD_BACKLIGHT=${LCD_BACKLIGHT})
          target_compile_definitions(nanoCLR PUBLIC -DLCD_RESET=${LCD_RESET})
          target_compile_definitions(nanoCLR PUBLIC -DLCD_DC=${LDC_DC})
          target_compile_definitions(nanoCLR PUBLIC -DSPI_BUS=${SPI_BUS})
          target_compile_definitions(nanoCLR PUBLIC -DSPI_CLK=${SPI_CLK})
          target_compile_definitions(nanoCLR PUBLIC -DSPI_TX=${SPI_TX})
          target_compile_definitions(nanoCLR PUBLIC -DSPI_CS=${SPI_CS})
          target_compile_definitions(nanoCLR PUBLIC -DGRAPHICS_HEAP_FAST=${GRAPHICS_HEAP_FAST})
else()
          target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_GRAPHICS=FALSE)
    endif()

    if(TOUCH_DISPLAY_SUPPORT)
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_DISPLAY_SUPPORT=TRUE)
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_BUS=${TOUCH_INTERFACE_BUS})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_SLAVE_ADDRESS=${TOUCH_INTERFACE_SLAVE_ADDRESS})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_I2C_SDA=${TOUCH_INTERFACE_I2C_SDA})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_I2C_SCL=${TOUCH_INTERFACE_I2C_SCL})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_INTERRUPT=${TOUCH_INTERFACE_INTERRUPT})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_WIDTH=${TOUCH_INTERFACE_WIDTH})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INTERFACE_HEIGHT=${TOUCH_INTERFACE_HEIGHT})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INVERT_X=${TOUCH_INVERT_X})
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_INVERT_Y=${TOUCH_INVERT_Y})
    else()
          target_compile_definitions(nanoCLR PUBLIC -DTOUCH_DISPLAY=FALSE)
    endif()

# Defines used in the c/c++ code in rare situations to debug and profile
    if(ADVANCED_PROFILING)
           target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_APPDOMAINS=1)
           target_compile_definitions(nanoCLR PUBLIC -DSUPPORT_ANY_BASE_CONVERSION=1)
           target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_NO_IL_INLINE=1)
           target_compile_definitions(nanoCLR PUBLIC -DPLATFORM_NO_CLR_TRACE=1)
           target_compile_definitions(nanoCLR PUBLIC -DNANOCLR_PROFILE_NEW_CALLS=1)
           target_compile_definitions(nanoCLR PUBLIC -DPROFILE_NEW_ALLOCATIONS=1)
           target_compile_definitions(nanoCLR PUBLIC -DTRACE_MEMORY_STATS=1)
    endif()

